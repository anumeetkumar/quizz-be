import express from 'express';
import { PrismaClient } from '@prisma/client';
import { GoogleGenAI, Type } from '@google/genai';
import { auth, AuthRequest } from '../middleware/auth'; // Updated import
import dotenv from 'dotenv';

dotenv.config();

const router = express.Router();
const prisma = new PrismaClient();
const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || '' });

// Updated route to use auth middleware
router.post('/create', auth, async (req: AuthRequest, res) => {
  try {
    const userId = req.user?.userId; // Updated to match auth middleware's user object

    if (!userId) {
      return res.status(401).json({
        success: false,
        message: 'Authentication required'
      });
    }

    const { topic, level, timeLimit, numberOfQuestions } = req.body;

    if (!topic || !level || timeLimit === undefined || numberOfQuestions === undefined) {
      return res.status(400).json({
        success: false,
        message: 'Missing required parameters (topic, level, timeLimit, numberOfQuestions)',
      });
    }

    const prompt = `Generate a quiz about "${topic}" for a ${level} level. The quiz should have ${numberOfQuestions} questions and be designed to be completed within ${timeLimit} minutes. For each question, provide the question text, exactly four options (labeled A, B, C, D), and the correct answer. Format the output as a JSON object matching the following schema:`;

    const responseSchema = {
      type: Type.OBJECT,
      properties: {
        quizTitle: { type: Type.STRING },
        questions: {
          type: Type.ARRAY,
          items: {
            type: Type.OBJECT,
            properties: {
              questionText: { type: Type.STRING },
              options: {
                type: Type.ARRAY,
                items: { type: Type.STRING },
              },
              correctAnswer: { type: Type.NUMBER },
            },
            required: ['questionText', 'options', 'correctAnswer'],
          },
        },
      },
      required: ['quizTitle', 'questions'],
    };

    const response = await ai.models.generateContent({
      model: 'gemini-1.5-flash',
      contents: [{ role: 'user', parts: [{ text: prompt }] }],
      config: {
        responseMimeType: 'application/json',
        responseSchema,
      },
    });

    const responseText = response.text;
    let quizData;

    try {
      const jsonMatch = responseText?.match(/```json\n([\s\S]*?)\n```/);
      quizData = jsonMatch?.[1]
        ? JSON.parse(jsonMatch[1])
        : JSON.parse(responseText || '');
    } catch (err) {
      console.error('Failed to parse Gemini response:', err);
      return res.status(500).json({
        success: false,
        message: 'Failed to parse AI response.',
        error: err.message,
      });
    }

    if (!quizData?.questions?.length) {
      return res.status(400).json({
        success: false,
        message: 'Invalid quiz data generated by AI.',
      });
    }

    const quiz = await prisma.quiz.create({
      data: {
        title: quizData.quizTitle,
        description: `A ${level} level quiz about ${topic}`,
        timeLimit,
        isPublic: true,
        authorId: userId, // This will now use the userId from auth middleware
        topic,
        questions: {
          create: quizData.questions.map((q) => ({
            text: q.questionText,
            options: {
              create: q.options.map((opt, index) => ({
                text: opt,
                isCorrect: index === q.correctAnswer,
              })),
            },
          })),
        },
      },
      include: {
        questions: {
          include: {
            options: true,
          },
        },
      },
    });

    return res.status(201).json({
      success: true,
      message: 'Quiz generated and saved successfully',
      data: quiz,
    });
  } catch (error) {
    console.error('Quiz creation error:', error);
    return res.status(500).json({
      success: false,
      message: 'Internal server error',
      error: error.message,
    });
  }
});

// Get all quizzes or a single quiz
router.get('/', async (req, res) => {
  try {
    const { isPublic, q, id } = req.query;

    // If ID is provided, return single quiz
    if (id) {
      const quiz = await prisma.quiz.findUnique({
        where: {
          id: Number(id),
        },
        include: {
          questions: {
            include: {
              options: true,
            },
          },
        },
      });

      if (!quiz) {
        return res.status(404).json({
          success: false,
          message: 'Quiz not found',
        });
      }

      return res.status(200).json({
        success: true,
        message: 'Quiz fetched successfully',
        data: quiz,
      });
    }

    // Otherwise, return multiple quizzes with search
    const searchQuery = q as string;
    const whereCondition = {
      AND: [
        isPublic === 'true' ? { isPublic: true } : {},
        searchQuery
          ? {
              OR: [
                {
                  title: {
                    contains: searchQuery,
                  },
                },
                {
                  description: {
                    contains: searchQuery,
                  },
                },
              ],
            }
          : {},
      ],
    };

    const quizzes = await prisma.quiz.findMany({
      where: whereCondition,
      include: {
        questions: {
          include: {
            options: true,
          },
        },
      },
      orderBy: {
        createdAt: 'desc',
      },
    });

    return res.status(200).json({
      success: true,
      message: 'Quizzes fetched successfully',
      data: quizzes,
    });
  } catch (error) {
    console.error('Fetch quizzes error:', error);
    return res.status(500).json({
      success: false,
      message: 'Internal server error',
      error: (error as Error).message,
    });
  }
});

export default router;
